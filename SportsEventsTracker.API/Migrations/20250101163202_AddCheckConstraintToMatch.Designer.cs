// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SportsEventTracker.API.Data;

#nullable disable

namespace SportsEventsTracker.API.Migrations
{
    [DbContext(typeof(SportsEventTrackerContext))]
    [Migration("20250101163202_AddCheckConstraintToMatch")]
    partial class AddCheckConstraintToMatch
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SportsEventTracker.Models.GameMatch", b =>
                {
                    b.Property<Guid>("MatchID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("MatchDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ScoreA")
                        .HasColumnType("int");

                    b.Property<int>("ScoreB")
                        .HasColumnType("int");

                    b.Property<string>("TeamAName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TeamBName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("MatchID");

                    b.HasIndex("TeamAName");

                    b.HasIndex("TeamBName");

                    b.ToTable("Matches", t =>
                        {
                            t.HasCheckConstraint("CK_Match_TeamNamesNotEqual", "[TeamAName] != [TeamBName]");
                        });
                });

            modelBuilder.Entity("SportsEventTracker.Models.Team", b =>
                {
                    b.Property<string>("TeamName")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("TeamName");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("SportsEventTracker.Models.GameMatch", b =>
                {
                    b.HasOne("SportsEventTracker.Models.Team", "TeamA")
                        .WithMany("MatchesAsTeamA")
                        .HasForeignKey("TeamAName")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SportsEventTracker.Models.Team", "TeamB")
                        .WithMany("MatchesAsTeamB")
                        .HasForeignKey("TeamBName")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("TeamA");

                    b.Navigation("TeamB");
                });

            modelBuilder.Entity("SportsEventTracker.Models.Team", b =>
                {
                    b.Navigation("MatchesAsTeamA");

                    b.Navigation("MatchesAsTeamB");
                });
#pragma warning restore 612, 618
        }
    }
}
